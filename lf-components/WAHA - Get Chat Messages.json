{"data":{"edges":[],"nodes":[{"data":{"type":"WAHAGetChatMessagesComponent","node":{"template":{"_type":"Component","base_url":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"base_url","value":"http://localhost:3000","display_name":"Base URL","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The base URL of the WAHA API.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"chat_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"chat_id","value":"","display_name":"Chat ID","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The ID of the chat to retrieve messages from.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import httpx\r\nfrom typing import List, Dict, Any\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.inputs import MessageTextInput, IntInput, BoolInput, DropdownInput\r\nfrom langflow.schema import Data\r\nfrom langflow.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\n\r\nclass WAHAGetChatMessagesComponent(LCToolComponent):\r\n    display_name = \"WAHA - Get Chat Messages\"\r\n    description = \"Retrieves messages from a specific chat in the WAHA API.\"\r\n    icon = \"message-circle-more\"\r\n    \r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"base_url\",\r\n            display_name=\"Base URL\",\r\n            info=\"The base URL of the WAHA API.\",\r\n            value=\"http://localhost:3000\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session\",\r\n            display_name=\"Session\",\r\n            info=\"The session name.\",\r\n            value=\"default\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"chat_id\",\r\n            display_name=\"Chat ID\",\r\n            info=\"The ID of the chat to retrieve messages from.\",\r\n        ),\r\n        IntInput(\r\n            name=\"limit\",\r\n            display_name=\"Limit\",\r\n            info=\"The maximum number of messages to retrieve.\",\r\n            value=100,\r\n        ),\r\n        BoolInput(\r\n            name=\"download_media\",\r\n            display_name=\"Download Media\",\r\n            info=\"Whether to download media for messages.\",\r\n            value=False,\r\n        ),\r\n        DropdownInput(\r\n            name=\"message_filter\",\r\n            display_name=\"Message Filter\",\r\n            options=[\"all\", \"from_me\", \"from_others\"],\r\n            value=\"all\",\r\n            info=\"Filter messages based on sender.\",\r\n        ),\r\n    ]\r\n\r\n    class WAHAGetChatMessagesSchema(BaseModel):\r\n        chat_id: str = Field(..., description=\"The ID of the chat to retrieve messages from.\")\r\n        limit: int = Field(100, description=\"The maximum number of messages to retrieve.\")\r\n        download_media: bool = Field(False, description=\"Whether to download media for messages.\")\r\n        message_filter: str = Field(\"all\", description=\"Filter messages based on sender.\")\r\n\r\n    def run_model(self) -> List[Data]:\r\n        messages = self._get_chat_messages(\r\n            self.chat_id, \r\n            self.limit, \r\n            self.download_media, \r\n            self.message_filter\r\n        )\r\n        return [Data(data=message) for message in messages]\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"waha_get_chat_messages\",\r\n            description=\"Retrieves messages from a specific chat in the WAHA API.\",\r\n            func=self._get_chat_messages,\r\n            args_schema=self.WAHAGetChatMessagesSchema,\r\n        )\r\n\r\n    def _get_chat_messages(\r\n        self, \r\n        chat_id: str, \r\n        limit: int = 100, \r\n        download_media: bool = False,\r\n        message_filter: str = \"all\"\r\n    ) -> List[Dict[str, Any]]:\r\n        url = f\"{self.base_url}/api/{self.session}/chats/{chat_id}/messages\"\r\n        params = {\r\n            \"limit\": limit,\r\n            \"downloadMedia\": download_media,\r\n        }\r\n        headers = {\r\n            \"X-Api-Key\": \"{{apiKey}}\",  # Replace with actual API key handling\r\n        }\r\n        \r\n        self.log(f\"Sending GET request to {url}\")\r\n        with httpx.Client() as client:\r\n            response = client.get(url, params=params, headers=headers)\r\n        \r\n        response.raise_for_status()\r\n        messages = response.json()\r\n        \r\n        # Apply message filter\r\n        if message_filter == \"from_me\":\r\n            messages = [msg for msg in messages if msg.get(\"fromMe\", False)]\r\n        elif message_filter == \"from_others\":\r\n            messages = [msg for msg in messages if not msg.get(\"fromMe\", False)]\r\n        \r\n        self.log(f\"Retrieved {len(messages)} messages after filtering\")\r\n        return messages","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"download_media":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"download_media","value":false,"display_name":"Download Media","advanced":false,"dynamic":false,"info":"Whether to download media for messages.","title_case":false,"type":"bool","_input_type":"BoolInput"},"limit":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"limit","value":1000,"display_name":"Limit","advanced":false,"dynamic":false,"info":"The maximum number of messages to retrieve.","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"message_filter":{"trace_as_metadata":true,"options":["all","from_me","from_others"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"message_filter","value":"from_me","display_name":"Message Filter","advanced":false,"dynamic":false,"info":"Filter messages based on sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"session":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session","value":"default","display_name":"Session","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The session name.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Retrieves messages from a specific chat in the WAHA API.","icon":"message-circle-more","base_classes":["Data","Tool"],"display_name":"WAHA - Get Chat Messages","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["base_url","session","chat_id","limit","download_media","message_filter"],"beta":false,"edited":true,"lf_version":"1.0.17","official":false},"id":"WAHAGetChatMessagesComponent-JSlLF"},"id":"WAHAGetChatMessagesComponent-JSlLF","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Retrieves messages from a specific chat in the WAHA API.","name":"WAHA - Get Chat Messages","id":"WAHAGetChatMessagesComponent-JSlLF","is_component":true,"last_tested_version":"1.0.18"}