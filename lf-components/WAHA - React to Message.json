{"data":{"edges":[],"nodes":[{"data":{"type":"WAHAReactToMessageComponent","node":{"template":{"_type":"Component","base_url":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"base_url","value":"http://localhost:3000","display_name":"Base URL","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The base URL of the WAHA API.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import httpx\r\nfrom typing import Dict, Any, Union\r\nfrom pydantic import BaseModel, Field\r\n\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.schema import Data\r\nfrom langflow.field_typing import Tool\r\nfrom langchain.tools import StructuredTool\r\n\r\nclass WAHAReactToMessageComponent(LCToolComponent):\r\n    display_name = \"WAHA - React to Message\"\r\n    description = \"Reacts to a specific message with an emoji using the WAHA API.\"\r\n    icon = \"message-circle-more\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"base_url\",\r\n            display_name=\"Base URL\",\r\n            info=\"The base URL of the WAHA API.\",\r\n            value=\"http://localhost:3000\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session\",\r\n            display_name=\"Session\",\r\n            info=\"The session name.\",\r\n            value=\"default\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"message_id\",\r\n            display_name=\"Message ID\",\r\n            info=\"The ID of the message to react to.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"reaction\",\r\n            display_name=\"Reaction\",\r\n            info=\"The emoji reaction to send.\",\r\n        ),\r\n    ]\r\n\r\n    class WAHAReactToMessageSchema(BaseModel):\r\n        message_id: str = Field(..., description=\"The ID of the message to react to.\")\r\n        reaction: str = Field(..., description=\"The emoji reaction to send.\")\r\n\r\n    def run_model(self) -> Data:\r\n        result = self._react_to_message(self.message_id, self.reaction)\r\n        return Data(data={\"result\": result})\r\n\r\n    def build_tool(self) -> Tool:\r\n        return StructuredTool.from_function(\r\n            name=\"waha_react_to_message\",\r\n            description=\"Reacts to a specific message with an emoji using the WAHA API.\",\r\n            func=self._react_to_message,\r\n            args_schema=self.WAHAReactToMessageSchema,\r\n        )\r\n\r\n    def _react_to_message(self, message_id: str, reaction: str) -> Union[Dict[str, Any], str]:\r\n        url = f\"{self.base_url}/api/reaction\"\r\n        payload = {\r\n            \"messageId\": message_id,\r\n            \"reaction\": reaction,\r\n            \"session\": self.session,\r\n        }\r\n        headers = {\r\n            \"X-Api-Key\": \"{{apiKey}}\",  # Replace with actual API key handling\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n\r\n        self.log(f\"Sending PUT request to {url}\")\r\n        with httpx.Client() as client:\r\n            response = client.put(url, json=payload, headers=headers)\r\n        response.raise_for_status()\r\n        \r\n        try:\r\n            result = response.json()\r\n        except json.JSONDecodeError:\r\n            # If the response is not JSON, return the text content\r\n            result = response.text\r\n\r\n        self.log(\"Reaction sent successfully\")\r\n        return result","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"message_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"message_id","value":"","display_name":"Message ID","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The ID of the message to react to.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"reaction":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"reaction","value":"","display_name":"Reaction","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The emoji reaction to send.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session","value":"default","display_name":"Session","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The session name.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Reacts to a specific message with an emoji using the WAHA API.","icon":"message-circle-more","base_classes":["Data","Tool"],"display_name":"WAHA - React to Message","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["base_url","session","message_id","reaction"],"beta":false,"edited":true,"official":false},"id":"CustomComponent-A0yju"},"id":"CustomComponent-A0yju","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Reacts to a specific message with an emoji using the WAHA API.","name":"WAHA - React to Message","id":"CustomComponent-A0yju","is_component":true,"last_tested_version":"1.0.18"}