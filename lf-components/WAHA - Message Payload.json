{"data":{"edges":[],"nodes":[{"data":{"type":"WAHAMessageParser","node":{"template":{"_type":"Component","input_data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"input_data","value":"","display_name":"Input Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"A Data object containing a 'payload' field with the WhatsApp message data.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import json\r\nfrom typing import Union, Dict, Any\r\nfrom langflow.custom import Component\r\nfrom langflow.io import DataInput, Output\r\nfrom langflow.schema import Data\r\nfrom langflow.schema.message import Message\r\nfrom loguru import logger\r\n\r\nclass WAHAMessageParserComponent(Component):\r\n    display_name = \"WAHA Message Parser\"\r\n    description = \"Parses a WhatsApp message from a Data input and provides multiple outputs for different parts of the message.\"\r\n    icon = \"message-square-code\"\r\n    name = \"WAHAMessageParser\"\r\n\r\n    inputs = [\r\n        DataInput(\r\n            name=\"input_data\",\r\n            display_name=\"Input Data\",\r\n            info=\"A Data object containing a 'payload' field with the WhatsApp message data.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Full Message\", name=\"full_message\", method=\"full_message_response\"),\r\n        Output(display_name=\"Message ID\", name=\"message_id\", method=\"message_id_response\"),\r\n        Output(display_name=\"Timestamp\", name=\"timestamp\", method=\"timestamp_response\"),\r\n        Output(display_name=\"From\", name=\"from\", method=\"from_response\"),\r\n        Output(display_name=\"From Me\", name=\"from_me\", method=\"from_me_response\"),\r\n        Output(display_name=\"To\", name=\"to\", method=\"to_response\"),\r\n        Output(display_name=\"Participant\", name=\"participant\", method=\"participant_response\"),\r\n        Output(display_name=\"Body\", name=\"body\", method=\"body_response\"),\r\n        Output(display_name=\"Has Media\", name=\"has_media\", method=\"has_media_response\"),\r\n        Output(display_name=\"Media\", name=\"media\", method=\"media_response\"),\r\n        Output(display_name=\"Ack\", name=\"ack\", method=\"ack_response\"),\r\n        Output(display_name=\"Ack Name\", name=\"ack_name\", method=\"ack_name_response\"),\r\n        Output(display_name=\"Author\", name=\"author\", method=\"author_response\"),\r\n        Output(display_name=\"Location\", name=\"location\", method=\"location_response\"),\r\n        Output(display_name=\"vCards\", name=\"vcards\", method=\"vcards_response\"),\r\n        Output(display_name=\"Reply To\", name=\"reply_to\", method=\"reply_to_response\"),\r\n    ]\r\n\r\n    def validate_input(self) -> Dict[str, Any]:\r\n        logger.info(\"Starting input validation\")\r\n        \r\n        if not isinstance(self.input_data, Data):\r\n            logger.error(f\"Invalid input type: {type(self.input_data)}. Expected Data object.\")\r\n            raise ValueError(\"Input must be a Data object.\")\r\n        \r\n        payload = self.input_data.data.get(\"payload\")\r\n        if not payload:\r\n            logger.error(\"No 'payload' field found in the input Data object.\")\r\n            raise ValueError(\"Input Data object must contain a 'payload' field.\")\r\n        \r\n        if not isinstance(payload, dict):\r\n            logger.error(f\"Invalid payload type: {type(payload)}. Expected dictionary.\")\r\n            raise ValueError(\"Payload must be a dictionary.\")\r\n        \r\n        return payload\r\n\r\n    def full_message_response(self) -> Data:\r\n        logger.info(\"Providing full message response\")\r\n        parsed_data = self.validate_input()\r\n        return Data(data=parsed_data)\r\n\r\n    def message_id_response(self) -> Message:\r\n        logger.info(\"Providing message ID response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=parsed_data.get(\"id\", \"\"))\r\n\r\n    def timestamp_response(self) -> Message:\r\n        logger.info(\"Providing timestamp response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=str(parsed_data.get(\"timestamp\", 0)))\r\n\r\n    def from_response(self) -> Message:\r\n        logger.info(\"Providing 'from' response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=parsed_data.get(\"from\", \"\"))\r\n\r\n    def from_me_response(self) -> Message:\r\n        logger.info(\"Providing 'fromMe' response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=str(parsed_data.get(\"fromMe\", False)))\r\n\r\n    def to_response(self) -> Message:\r\n        logger.info(\"Providing 'to' response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=parsed_data.get(\"to\", \"\"))\r\n\r\n    def participant_response(self) -> Message:\r\n        logger.info(\"Providing participant response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=parsed_data.get(\"participant\", \"\"))\r\n\r\n    def body_response(self) -> Message:\r\n        logger.info(\"Providing body response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=parsed_data.get(\"body\", \"\"))\r\n\r\n    def has_media_response(self) -> Message:\r\n        logger.info(\"Providing hasMedia response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=str(parsed_data.get(\"hasMedia\", False)))\r\n\r\n    def media_response(self) -> Data:\r\n        logger.info(\"Providing media response\")\r\n        parsed_data = self.validate_input()\r\n        return Data(data=parsed_data.get(\"media\", {}))\r\n\r\n    def ack_response(self) -> Message:\r\n        logger.info(\"Providing ack response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=str(parsed_data.get(\"ack\", \"\")))\r\n\r\n    def ack_name_response(self) -> Message:\r\n        logger.info(\"Providing ackName response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=parsed_data.get(\"ackName\", \"\"))\r\n\r\n    def author_response(self) -> Message:\r\n        logger.info(\"Providing author response\")\r\n        parsed_data = self.validate_input()\r\n        return Message(text=parsed_data.get(\"author\", \"\"))\r\n\r\n    def location_response(self) -> Data:\r\n        logger.info(\"Providing location response\")\r\n        parsed_data = self.validate_input()\r\n        return Data(data=parsed_data.get(\"location\", {}))\r\n\r\n    def vcards_response(self) -> Data:\r\n        logger.info(\"Providing vCards response\")\r\n        parsed_data = self.validate_input()\r\n        return Data(data={\"vCards\": parsed_data.get(\"vCards\", [])})\r\n\r\n    def reply_to_response(self) -> Data:\r\n        logger.info(\"Providing reply_to response\")\r\n        parsed_data = self.validate_input()\r\n        return Data(data=parsed_data.get(\"replyTo\", {}))\r\n\r\n    def build(self) -> Dict[str, Union[Message, Data]]:\r\n        logger.info(\"Building component outputs\")\r\n        parsed_data = self.validate_input()\r\n        return {\r\n            \"full_message\": Data(data=parsed_data),\r\n            \"message_id\": Message(text=parsed_data.get(\"id\", \"\")),\r\n            \"timestamp\": Message(text=str(parsed_data.get(\"timestamp\", 0))),\r\n            \"from\": Message(text=parsed_data.get(\"from\", \"\")),\r\n            \"from_me\": Message(text=str(parsed_data.get(\"fromMe\", False))),\r\n            \"to\": Message(text=parsed_data.get(\"to\", \"\")),\r\n            \"participant\": Message(text=parsed_data.get(\"participant\", \"\")),\r\n            \"body\": Message(text=parsed_data.get(\"body\", \"\")),\r\n            \"has_media\": Message(text=str(parsed_data.get(\"hasMedia\", False))),\r\n            \"media\": Data(data=parsed_data.get(\"media\", {})),\r\n            \"ack\": Message(text=str(parsed_data.get(\"ack\", \"\"))),\r\n            \"ack_name\": Message(text=parsed_data.get(\"ackName\", \"\")),\r\n            \"author\": Message(text=parsed_data.get(\"author\", \"\")),\r\n            \"location\": Data(data=parsed_data.get(\"location\", {})),\r\n            \"vcards\": Data(data={\"vCards\": parsed_data.get(\"vCards\", [])}),\r\n            \"reply_to\": Data(data=parsed_data.get(\"replyTo\", {})),\r\n        }","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Parses a WhatsApp message from a Data input and provides multiple outputs for different parts of the message.","icon":"message-square-code","base_classes":["Data","Message"],"display_name":"WAHA - Message Payload","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"full_message","display_name":"Full Message","method":"full_message_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"message_id","display_name":"Message ID","method":"message_id_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"timestamp","display_name":"Timestamp","method":"timestamp_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"from","display_name":"From","method":"from_response","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"from_me","display_name":"From Me","method":"from_me_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"to","display_name":"To","method":"to_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"participant","display_name":"Participant","method":"participant_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"body","display_name":"Body","method":"body_response","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"has_media","display_name":"Has Media","method":"has_media_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Data"],"selected":"Data","name":"media","display_name":"Media","method":"media_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"ack","display_name":"Ack","method":"ack_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"ack_name","display_name":"Ack Name","method":"ack_name_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Message"],"selected":"Message","name":"author","display_name":"Author","method":"author_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Data"],"selected":"Data","name":"location","display_name":"Location","method":"location_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Data"],"selected":"Data","name":"vcards","display_name":"vCards","method":"vcards_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["Data"],"selected":"Data","name":"reply_to","display_name":"Reply To","method":"reply_to_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_data"],"beta":false,"edited":true,"lf_version":"1.0.17","official":false},"id":"WAHAMessageParser-vFNUP"},"id":"WAHAMessageParser-vFNUP","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Parses a WhatsApp message from a Data input and provides multiple outputs for different parts of the message.","name":"WAHA - Message Payload","id":"WAHAMessageParser-vFNUP","is_component":true,"last_tested_version":"1.0.18"}